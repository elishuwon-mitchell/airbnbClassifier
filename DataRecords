/*THIS CODE IS MY OWN WORK, IT WAS WRITTEN WITHOUT CONSULTING

A TUTOR OR CODE WRITTEN BY OTHER STUDENTS - Colvin Zhu*/

package Clustering;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

/*
 * Data model to access dataset file
 * 		Attributes: labeled as id's 0 to (number of attributes-1)
 * 			first column is skipped because it is the class label
 * 		Records: labeled as id's 0 to (number of records-1)
 */
public class DataRecords {
	private String filePath;
	private int numAttr;
	private String delimiter;
	private char[] schema;
	
	public DataRecords (String filePath, String delimiter) {
		setFilePath(filePath);
		setDelimiter(delimiter);
		setSchema();
	}
	
	/*Schema: first line of file that specifies attribute types
	 *	'c': categorical
	 *	'n': numeric
	 *	'H': class label
	 **/
	public void setSchema (){
		String s = "";
		String[] line;
		char[] schema;
		
		try {
			BufferedReader bReader = new BufferedReader(new FileReader(filePath));
			s = bReader.readLine();
			bReader.close();
		} catch (IOException e) {
			System.out.println(e.getMessage());
		}
		
		line = s.split(delimiter);
		setNumAttr(line.length);
		schema = new char[numAttr];
		for (int i=0; i<line.length; i++){
			schema[i] = line[i].charAt(0);
		}
		
		this.schema = schema;
	}
	
	public char[] getSchema () {
		return schema;
	}

	/*
	 * get record from file as a Record object
	 */
	public Record getRecord (int id) {
		String s = null;
		String[] attributes;
		Record record;
		
		//read line as string
		try{
			BufferedReader bReader = new BufferedReader(new FileReader(filePath));
			for (int i=-1; i<=id; i++){
				s = bReader.readLine();
			}
			bReader.close();
		}catch (IOException e){
			System.out.println(e.getMessage());
			return null;
		}
		if (s == null) return null;
		
		//convert line to Record
		attributes = s.split(delimiter);
		record = new Record(numAttr);
		for (int i=0; i<numAttr; i++){
			if (schema[i] == 'c'){
				record.addCat(i, attributes[i]);
			}else if (schema[i] == 'n'){
				record.addNum(i, Double.parseDouble(attributes[i]));
			}else if (schema[i] == 'H'){
				record.setClassLabel(attributes[i]);
			}
		}
		
		return record;
	}
	
	public int getNumRecords() {	
		int count = 0;
		try{
			BufferedReader bReader = new BufferedReader(new FileReader(filePath));
			bReader.readLine(); //skip schema
			String s = bReader.readLine();
			while(s!=null && !"".equals(s)){
				count++;
				s = bReader.readLine();
			}
			bReader.close();
			return count;
		}catch (IOException e){
			System.out.println(e.getMessage());
			return -1;
		}
	}
	
	public String getFilePath() {
		return filePath;
	}

	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}

	public int getNumAttr() {
		return numAttr;
	}

	public void setNumAttr(int numAttr) {
		this.numAttr = numAttr;
	}
	
	public String getDelimiter() {
		return delimiter;
	}

	public void setDelimiter(String delimiter) {
		this.delimiter = delimiter;
	}
}
